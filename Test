import os
import pandas as pd
import shutil

def load_excel(file_path):
    """Load the Excel file and return Alert HQ and Alert Blueprint sheets."""
    xls = pd.ExcelFile(file_path)
    alert_hq = pd.read_excel(xls, sheet_name="Alert HQ", header=None)  # No headers in Alert HQ
    alert_blueprint = pd.read_excel(xls, sheet_name="Alert Blueprint")  # First row is header
    return alert_hq, alert_blueprint

def create_feature_folder(base_path, feature_name, excel_file):
    """Create a feature folder inside CERA_AUTO_ALERTS and copy renamed Excel file into it."""
    feature_folder = os.path.join(base_path, feature_name)
    os.makedirs(feature_folder, exist_ok=True)
    
    acc_template_folder = os.path.join(base_path, "ACC_Template")
    acc_template_excel = next((f for f in os.listdir(acc_template_folder) if f.endswith(".xlsx")), None)
    
    if acc_template_excel:
        src_excel_path = os.path.join(acc_template_folder, acc_template_excel)
        dest_excel_path = os.path.join(feature_folder, feature_name + ".xlsx")
        shutil.copy(src_excel_path, dest_excel_path)
    
    return feature_folder

def generate_spl_files(base_path, alert_hq, alert_blueprint):
    """Generate SPL files inside ENV-specific folders under the feature folder."""
    feature_name = str(alert_hq.iloc[0, 1]).strip()  # B1 from Alert HQ
    feature_folder = create_feature_folder(base_path, feature_name, alert_hq)
    
    base_id = str(alert_hq.iloc[6, 1]).strip().zfill(5)  # B7 from Alert HQ, ensuring 5-digit format
    env_list = str(alert_hq.iloc[2, 1]).split(",")  # B3 from Alert HQ (Comma-separated ENV list)
    
    for index, row in alert_blueprint.iterrows():
        title = row["Title"]  # A2 onwards from Alert Blueprint
        severity = row["Severity"]  # B2 onwards (same for all)
        spl_content = row["SPL Content"]  # C2 onwards (full query)

        file_title = "".join(word.capitalize() for word in title.split())  # Capitalize first letter of each word

        for env in env_list:
            env_folder = os.path.join(feature_folder, env.strip())
            os.makedirs(env_folder, exist_ok=True)

            spl_file_name = f"{file_title}.spl"
            spl_file_path = os.path.join(env_folder, spl_file_name)

            updated_spl_content = spl_content.replace('cf_space_name=""', f'cf_space_name="{env.strip()}"')

            with open(spl_file_path, "w") as spl_file:
                spl_file.write(updated_spl_content)

            base_id = str(int(base_id) + 1).zfill(5)  # Increment ID while maintaining 5-digit format

def main():
    base_path = r""  # <-- You will provide this
    excel_file = os.path.join(base_path, "ACC_Template", "ACC_Template.xlsx")
    
    alert_hq, alert_blueprint = load_excel(excel_file)
    generate_spl_files(base_path, alert_hq, alert_blueprint)

if __name__ == "__main__":
    main()
