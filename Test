import os
import shutil
import pandas as pd

# Hardcoded base folder path
BASE_FOLDER_PATH = "C:/CERA_ALERTS/"
TEMPLATE_FOLDER = os.path.join(BASE_FOLDER_PATH, "ACC_TEMPLATE")
TEMPLATE_FILE = os.path.join(TEMPLATE_FOLDER, "ACC_Template.xlsx")

def create_feature_folder(feature_number):
    """Creates a feature folder inside BASE_FOLDER_PATH"""
    feature_folder = os.path.join(BASE_FOLDER_PATH, feature_number)
    os.makedirs(feature_folder, exist_ok=True)
    return feature_folder

def copy_excel_to_feature_folder(feature_folder, feature_number):
    """Copies the ACC Template Excel file into the feature folder and renames it"""
    new_excel_path = os.path.join(feature_folder, f"{feature_number}_ACC.xlsx")
    shutil.copy(TEMPLATE_FILE, new_excel_path)
    return new_excel_path

def read_excel_sheets(excel_path):
    """Reads required sheets from the Excel file"""
    xls = pd.ExcelFile(excel_path)
    alert_hq = pd.read_excel(xls, sheet_name="Alert HQ")
    alert_blueprint = pd.read_excel(xls, sheet_name="Alert Blueprint")
    return alert_hq, alert_blueprint

def create_env_folders(feature_folder, env_list):
    """Creates subfolders for each environment inside the feature folder"""
    env_folders = {}
    for env in env_list:
        env_path = os.path.join(feature_folder, env.strip())
        os.makedirs(env_path, exist_ok=True)
        env_folders[env.strip()] = env_path
    return env_folders

def generate_spl_files(env_folders, alert_hq, alert_blueprint):
    """Generates .spl files with updated cf_space_name"""
    base_id = int(alert_hq.iloc[6, 1])  # ID from B7 in Alert HQ
    app_name = alert_hq.iloc[1, 1]  # APP-NAME from B2 in Alert HQ
    env_list = alert_hq.iloc[2, 1].split(",")  # ENV List from B3

    for index, row in alert_blueprint.iterrows():
        if index == 0:
            continue  # Skip header row

        title = row[0]  # Title from Column A
        severity = row[1]  # Severity from Column B
        query = row[2]  # Query from Column C

        formatted_title = "-".join(word.capitalize() for word in title.split())  # Title Formatting

        for env in env_list:
            env = env.strip()
            current_id = base_id
            spl_file_name = f"CERA-APP-{current_id}-{severity}-{env}-{app_name}-{formatted_title}.spl"
            spl_file_path = os.path.join(env_folders[env], spl_file_name)

            # Update cf_space_name in query
            updated_query = query.replace('cf_space_name=""', f'cf_space_name="{env}"')

            # Write to .spl file
            with open(spl_file_path, "w", encoding="utf-8") as spl_file:
                spl_file.write(updated_query)

            base_id += 1  # Increment ID for next file

# Main Execution
def main():
    alert_hq, alert_blueprint = read_excel_sheets(TEMPLATE_FILE)
    feature_number = str(alert_hq.iloc[0, 1])  # Feature Number from B1 of Alert HQ

    feature_folder = create_feature_folder(feature_number)
    copied_excel_path = copy_excel_to_feature_folder(feature_folder, feature_number)

    alert_hq, alert_blueprint = read_excel_sheets(copied_excel_path)
    env_list = alert_hq.iloc[2, 1].split(",")  # ENV List from B3

    env_folders = create_env_folders(feature_folder, env_list)
    generate_spl_files(env_folders, alert_hq, alert_blueprint)

if __name__ == "__main__":
    main()
