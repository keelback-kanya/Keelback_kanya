import os
import shutil
import pandas as pd

# Hardcoded base folder path
BASE_PATH = r"D:\Projects\CERA_ALERTS"
TEMPLATE_PATH = os.path.join(BASE_PATH, "ACC_TEMPLATE", "ACC_Template.xlsx")

def create_feature_folder(feature_number):
    """Creates a feature-specific folder inside CERA_ALERTS."""
    feature_folder = os.path.join(BASE_PATH, feature_number)
    os.makedirs(feature_folder, exist_ok=True)
    return feature_folder

def copy_excel_template(feature_folder, feature_number):
    """Copies the ACC_Template.xlsx and renames it inside the feature folder."""
    new_excel_path = os.path.join(feature_folder, f"{feature_number}_ACC.xlsx")
    shutil.copy(TEMPLATE_PATH, new_excel_path)
    return new_excel_path

def extract_data_from_excel(excel_path):
    """Extracts Feature Number (B1) and Environments (B3) from Alert HQ."""
    df_hq = pd.read_excel(excel_path, sheet_name="Alert HQ", header=None)

    feature_number = str(df_hq.iloc[0, 1]).strip()  # B1
    environments = str(df_hq.iloc[2, 1]).strip()  # B3
    
    if not feature_number or feature_number.lower() == "nan":
        raise ValueError("Feature Number (B1) is missing or invalid.")
    
    env_list = [env.strip().upper() for env in environments.split(",") if env.strip()]
    
    return feature_number, env_list

def create_environment_folders(feature_folder, env_list):
    """Creates subfolders for each environment inside the feature folder."""
    for env in env_list:
        env_folder = os.path.join(feature_folder, env)
        os.makedirs(env_folder, exist_ok=True)

def main():
    try:
        print("Processing Excel file...")
        
        # Step 1: Extract Data from Excel
        feature_number, env_list = extract_data_from_excel(TEMPLATE_PATH)
        
        # Step 2: Create Feature Folder
        feature_folder = create_feature_folder(feature_number)
        
        # Step 3: Copy and Rename Excel Template
        new_excel_path = copy_excel_template(feature_folder, feature_number)
        
        # Step 4: Create Environment Folders
        create_environment_folders(feature_folder, env_list)

        print(f"✅ Successfully created folders for Feature: {feature_number}")
        print(f"📂 Location: {feature_folder}")
        print(f"🗂️ Subfolders: {', '.join(env_list)}")

    except Exception as e:
        print(f"❌ Error: {e}")

if __name__ == "__main__":
    main()
