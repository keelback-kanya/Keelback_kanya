import os
import pandas as pd
import shutil

# Hardcoded base folder path
BASE_PATH = r"C:\Users\e150819\OneDrive - Mastercard\Documents\Test Automation\CERA_ALERTS"

def load_excel(file_path):
    """ Load the Excel file and return relevant sheets """
    xls = pd.ExcelFile(file_path)
    alert_hq = pd.read_excel(xls, "Alert HQ", header=None)
    alert_blueprint = pd.read_excel(xls, "Alert Blueprint", header=None)
    return alert_hq, alert_blueprint

def create_feature_folder(alert_hq):
    """ Create a feature folder based on B1 in Alert HQ """
    feature_name = str(alert_hq.iloc[0, 1]).strip()  # B1
    feature_folder = os.path.join(BASE_PATH, feature_name)
    os.makedirs(feature_folder, exist_ok=True)
    return feature_folder, feature_name

def copy_template_excel(feature_folder, feature_name):
    """ Copy and rename the template Excel file inside the feature folder """
    template_path = os.path.join(BASE_PATH, "ACC_TEMPLATE", "ACC_Template.xlsx")
    new_excel_path = os.path.join(feature_folder, f"{feature_name}_ACC.xlsx")
    shutil.copy(template_path, new_excel_path)
    return new_excel_path

def create_env_folders(feature_folder, alert_hq):
    """ Create folders based on B3 (comma-separated environments) in Alert HQ """
    env_list = str(alert_hq.iloc[2, 1]).strip().split(",")  # B3
    env_folders = {}
    for env in env_list:
        env = env.strip()
        env_path = os.path.join(feature_folder, env)
        os.makedirs(env_path, exist_ok=True)
        env_folders[env] = env_path
    return env_folders

def generate_spl_files(env_folders, alert_hq, alert_blueprint):
    """ Generate SPL files using data from Alert HQ and Alert Blueprint """

    # Extract base ID from B7 (Ensure it's clean and numeric)
    try:
        base_id = int(str(alert_hq.iloc[6, 1]).strip())  # B7
    except ValueError:
        print("ERROR: Invalid ID in B7. Check Alert HQ.")
        return
    
    app_name = str(alert_hq.iloc[1, 1]).strip()  # B2 (App Name)

    # Iterate over rows in Alert Blueprint (skip header row)
    for index, row in alert_blueprint.iloc[1:].iterrows():
        title = str(row[0]).strip()  # A column (Title)
        severity = str(row[1]).strip()  # B column (Severity)
        query_content = str(row[2]).strip()  # C column (Query Content)

        # Generate SPL file for each ENV
        for env in env_folders:
            current_id = f"{base_id:05}"  # Ensure 5-digit ID
            base_id += 1  # Increment ID for next file

            # Format filename
            formatted_title = "".join(word.capitalize() for word in title.split())  # Convert to TitleCase
            spl_filename = f"CERA-{app_name}-{current_id}-{severity}-{env}-{app_name}-{formatted_title}.spl"
            spl_path = os.path.join(env_folders[env], spl_filename)

            # Modify cf_space_name in query content
            query_with_env = query_content.replace('cf_space_name=""', f'cf_space_name="{env}"')

            # Write SPL file
            with open(spl_path, "w") as file:
                file.write(query_with_env)
    
    print("âœ… SPL files successfully created in respective ENV folders.")

def main():
    excel_file = r"C:\Users\e150819\OneDrive - Mastercard\Documents\Test Automation\ACC_Template\ACC_Template.xlsx"
    
    # Load data
    alert_hq, alert_blueprint = load_excel(excel_file)
    
    # Step 1: Create feature folder using B1
    feature_folder, feature_name = create_feature_folder(alert_hq)
    
    # Step 2: Copy and rename the Excel file
    new_excel_path = copy_template_excel(feature_folder, feature_name)
    
    # Step 3: Create environment folders
    env_folders = create_env_folders(feature_folder, alert_hq)
    
    # Step 4: Generate SPL files
    generate_spl_files(env_folders, alert_hq, alert_blueprint)

if __name__ == "__main__":
    main()
