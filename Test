import os
import pandas as pd

# Define constants
BASE_FOLDER_PATH = r"C:\Users\e150819\OneDrive - Mastercard\Documents\Test Automation\CERA_ALERTS"
TEMPLATE_FOLDER = os.path.join(BASE_FOLDER_PATH, "ACC_TEMPLATE")

def load_workbook():
    """Loads the workbook and reads Alert HQ & Alert Blueprint sheets."""
    excel_files = [f for f in os.listdir(TEMPLATE_FOLDER) if f.endswith(".xlsx")]
    if not excel_files:
        raise FileNotFoundError("No Excel template found in ACC_TEMPLATE.")
    
    workbook_path = os.path.join(TEMPLATE_FOLDER, excel_files[0])
    workbook = pd.ExcelFile(workbook_path)

    alert_hq = pd.read_excel(workbook, sheet_name="Alert HQ", dtype=str).fillna("")
    alert_blueprint = pd.read_excel(workbook, sheet_name="Alert Blueprint", dtype=str).fillna("")

    return workbook_path, alert_hq, alert_blueprint

def get_base_id(alert_hq):
    """Finds the ID dynamically from Alert HQ (Column A contains 'ID')."""
    id_row = alert_hq[alert_hq.iloc[:, 0].str.contains("ID", na=False, case=False)].index
    if not id_row.empty:
        return str(alert_hq.iloc[id_row[0], 1]).strip()
    raise ValueError("ID not found in Alert HQ")

def setup_feature_folder(feature_id, workbook_path):
    """Creates a folder named after the Feature ID & copies the template Excel inside it."""
    feature_folder = os.path.join(BASE_FOLDER_PATH, feature_id)
    os.makedirs(feature_folder, exist_ok=True)

    # Copy Excel file into feature folder
    feature_excel_path = os.path.join(feature_folder, f"{feature_id}_ACC.xlsx")
    if not os.path.exists(feature_excel_path):
        pd.ExcelWriter(feature_excel_path).close()  # Create an empty file first
        os.system(f'copy "{workbook_path}" "{feature_excel_path}"')

    return feature_folder, feature_excel_path

def create_env_folders(feature_folder, alert_hq):
    """Creates environment folders based on B3 (comma-separated values) in Alert HQ."""
    envs = alert_hq.iloc[2, 1].split(",")  # B3 (assuming it's in row index 2)
    env_folders = {}

    for env in map(str.strip, envs):
        env_folder = os.path.join(feature_folder, env)
        os.makedirs(env_folder, exist_ok=True)
        env_folders[env] = env_folder

    return env_folders

def generate_spl_files(env_folders, alert_hq, alert_blueprint, base_id):
    """Creates SPL files in respective environment folders based on Alert Blueprint."""
    app_name = alert_hq.iloc[1, 1].strip()  # B2
    severity_column = alert_blueprint.iloc[:, 1]  # Column B (Severity)
    title_column = alert_blueprint.iloc[:, 0]  # Column A (Title)
    query_column = alert_blueprint.iloc[:, 2]  # Column C (Query)

    current_id = int(base_id)

    for index, title in enumerate(title_column[1:], start=1):  # Skip headers
        severity = severity_column[index].strip()
        query_template = query_column[index]

        for env, env_folder in env_folders.items():
            spl_filename = f"CERA-{app_name}-{str(current_id).zfill(5)}-{severity}-{env}-{app_name}-{title.replace(' ', '')}.spl"
            spl_path = os.path.join(env_folder, spl_filename)

            # Update query with correct cf_space_name
            query_content = query_template.replace('cf_space_name=""', f'cf_space_name="{env}"')

            with open(spl_path, "w", encoding="utf-8") as file:
                file.write(query_content)

            current_id += 1  # Increment ID for next file

def main():
    workbook_path, alert_hq, alert_blueprint = load_workbook()
    base_id = get_base_id(alert_hq)
    feature_folder, feature_excel_path = setup_feature_folder(base_id, workbook_path)
    env_folders = create_env_folders(feature_folder, alert_hq)
    generate_spl_files(env_folders, alert_hq, alert_blueprint, base_id)

    print(f"âœ… SPL files successfully generated in {feature_folder}")

if __name__ == "__main__":
    main()
